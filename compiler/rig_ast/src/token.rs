use rig_intern::InternedString;
use rig_span::Span;

#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct LexicalToken {
    pub kind: TokenKind,
    pub raw: InternedString,
    pub span: Span,
}

#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub enum NumberKind {
    Bin,
    Oct,
    Hex,
    Dec,
}

#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub enum TokenKind {
    // Kinds that represent values
    String(InternedString),
    Number {
        number: InternedString,
        kind: NumberKind,
    },
    True,
    False,
    Ident(InternedString),

    // Keywords
    Pub,
    Struct,
    Enum,
    Fn,
    Trait,
    Mut,
    Const,
    Type,
    Use,
    For,
    While,
    Loop,
    If,
    Else,
    Anon,
    Vararg,
    Let,
    Where,
    Impl,
    In,
    Mod,
    As,
    Match,

    LParen,
    RParen,
    LBrace,
    RBrace,
    LBracket,
    RBracket,
    Assign,
    Eq,
    NotEq,
    Less,
    LessEq,
    Greater,
    Plus,
    PlusEq,
    Minus,
    MinusEq,
    Mul,
    MulEq,
    Div,
    DivEq,
    LShift,
    LShiftEq,
    And,
    LogicalAnd,
    AndEq,
    Or,
    LogicalOr,
    OrEq,
    Xor,
    XorEq,
    Not,
    BinaryNot,
    Power,
    PowerEq,
    Colon,
    PathSep,
    Comma,
    Semi,
    Dot,
    Eof,
    RightArrow,
    FatRightArrow,
}

impl TokenKind {
    pub fn name(&self) -> &str {
        match self {
            TokenKind::String(_) => "string",
            TokenKind::Number { .. } => "number",
            TokenKind::True => "true",
            TokenKind::False => "false",
            TokenKind::Ident(_) => "identifier",
            TokenKind::Pub => "pub",
            TokenKind::Struct => "struct",
            TokenKind::Enum => "enum",
            TokenKind::Fn => "fn",
            TokenKind::Trait => "trait",
            TokenKind::Mut => "mut",
            TokenKind::Const => "const",
            TokenKind::Type => "type",
            TokenKind::Use => "use",
            TokenKind::For => "for",
            TokenKind::While => "while",
            TokenKind::Loop => "loop",
            TokenKind::If => "if",
            TokenKind::Else => "else",
            TokenKind::Anon => "anon",
            TokenKind::Vararg => "vararg",
            TokenKind::Let => "let",
            TokenKind::Where => "where",
            TokenKind::Impl => "impl",
            TokenKind::In => "in",
            TokenKind::Mod => "mod",
            TokenKind::As => "as",
            TokenKind::Match => "match",
            TokenKind::LParen => "(",
            TokenKind::RParen => ")",
            TokenKind::LBrace => "{",
            TokenKind::RBrace => "}",
            TokenKind::LBracket => "[",
            TokenKind::RBracket => "]",
            TokenKind::Assign => "=",
            TokenKind::Eq => "==",
            TokenKind::NotEq => "!=",
            TokenKind::Less => "<",
            TokenKind::LessEq => "<=",
            TokenKind::Greater => ">",
            TokenKind::Plus => "+",
            TokenKind::PlusEq => "+=",
            TokenKind::Minus => "-",
            TokenKind::MinusEq => "-=",
            TokenKind::Mul => "*",
            TokenKind::MulEq => "*=",
            TokenKind::Div => "/",
            TokenKind::DivEq => "/=",
            TokenKind::LShift => "<<",
            TokenKind::LShiftEq => ">>=",
            TokenKind::And => "&",
            TokenKind::LogicalAnd => "&&",
            TokenKind::AndEq => "&=",
            TokenKind::Or => "|",
            TokenKind::LogicalOr => "||",
            TokenKind::OrEq => "|=",
            TokenKind::Xor => "^",
            TokenKind::XorEq => "^=",
            TokenKind::Not => "!",
            TokenKind::BinaryNot => "~",
            TokenKind::Power => "**",
            TokenKind::PowerEq => "**=",
            TokenKind::Colon => ":",
            TokenKind::PathSep => "::",
            TokenKind::Comma => ",",
            TokenKind::Semi => ";",
            TokenKind::Dot => ".",
            TokenKind::Eof => "<eof>",
            TokenKind::RightArrow => "->",
            TokenKind::FatRightArrow => "=>",
        }
    }
}
