use std::fs::File;

pub struct TestXYZ {
    x: sometype,
    pub y: ty,
    pub anotherfield: x,
}

impl TestXYZ {
    fn early_return() { return null; x; }
    fn early_break() { loop { break; x; } }
    fn early_continue() { loop { continue; x; } }
}

fn hello(f: File) -> None {
    struct TestXYZ {
        x: sometype,
        pub y: y,
        pub anotherfield: x,
    }

    enum X {
        Y {
            x: y
        },
        Variant2,
        Variant3 {
            z: x
        }
    }

    let enum_t = X::Y {
        x: "hello"
    };

    match enum_t {
        Y => {
            # note that enum's fields are put into scope automatically
            print x;
        }
        Variant2 => {
            print "X::Variant2";
        }
        Variant3 => {
            print z;
        }
    }

    let x: File = 2 * 3 * x * 2 + 2 / 3 << 3 & 1 == 2 % !3;

    let y: YetAnotherType = ((x + 1) + x.call());

    let NoTypeAnnotation = y = (x * 2);

    let s = File::open("/dev/urandom");

    if (true) { return null; x; } else { return null; x; }

    x.y = "hello";

    loop { break; x; }
    loop { continue; y; }

    x()()().y(y()()());

    {
        let z = 1;

    }
    return null;

    let x: y = SomeModule::TestXYZ {
        x: sometype::new(),
        y: ty::new(),
        anotherfield: x {
            y: x
        }
    };

}
